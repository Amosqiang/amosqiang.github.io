# .github/workflows/sync_to_x.yml
name: Sync Blog Posts to X

# 增加 contents: write 权限允许推送提交
permissions:
  actions: read    
  contents: write # 必须有 write 权限才能 commit & push

on:
  workflow_dispatch: 
  workflow_run:
    workflows: ["pages-build-deployment"] 
    types: [completed]

jobs:
  sync:
    if: ${{ github.event.workflow_run.conclusion == 'success' }} 
    runs-on: ubuntu-latest
    env:
      PYTHON_VERSION: '3.9'
      STATE_FILE_PATH: './last_post_guid.txt' # 脚本读写状态文件的路径 (在仓库根目录)
      RSS_FEED_URL: 'https://amosqiang.github.io/feed.xml'
      # Git 提交使用的用户名和邮箱
      COMMIT_USER_NAME: 'github-actions[bot]'
      COMMIT_USER_EMAIL: 'github-actions[bot]@users.noreply.github.com'
      COMMIT_MESSAGE: 'chore: Update last tweeted post GUID' # 提交信息

    steps:
      # 步骤 1: 签出代码库 (现在会自动包含仓库中的 state 文件)
      - name: Checkout repository
        uses: actions/checkout@v4
        # 如果需要推送，可能需要设置 token，但 GITHUB_TOKEN 在有 write 权限时通常足够
        # with:
        #  token: ${{ secrets.GITHUB_TOKEN }}

      # 步骤 2: 设置 Python 环境
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip' 

      # 步骤 3: 安装依赖库
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      # !!! 移除了 Artifact 下载步骤 !!!

      # 步骤 4: (可选) 等待 Feed 更新
      - name: Wait for feed propagation (optional)
        run: sleep 15s 
        shell: bash

      # 步骤 5: 运行同步脚本 (脚本本身无需改动)
      - name: Run sync script
        id: sync_script 
        env:
          X_API_KEY: ${{ secrets.X_API_KEY }}
          X_API_SECRET: ${{ secrets.X_API_SECRET }}
          X_ACCESS_TOKEN: ${{ secrets.X_ACCESS_TOKEN }}
          X_ACCESS_TOKEN_SECRET: ${{ secrets.X_ACCESS_TOKEN_SECRET }}
          RSS_FEED_URL: ${{ env.RSS_FEED_URL }}
          STATE_FILE_PATH: ${{ env.STATE_FILE_PATH }}
          REQUIRED_TAG: "X" 
        run: python sync_to_x.py 

      # !!! 新增步骤：提交并推送状态文件 (如果它被修改了) !!!
      - name: Configure Git User
        # 配置用于提交的用户名和邮箱
        run: |
          git config user.name "${{ env.COMMIT_USER_NAME }}"
          git config user.email "${{ env.COMMIT_USER_EMAIL }}"
          
      - name: Check for changes in state file
        id: git_status
        run: |
          # 将状态文件添加到暂存区，以便检测更改
          # 如果文件不存在或未被修改，git add 不会报错
          git add ${{ env.STATE_FILE_PATH }} || echo "State file likely doesn't exist yet."
          # 检查暂存区是否有关于这个文件的更改
          if git diff --staged --quiet --exit-code ${{ env.STATE_FILE_PATH }}; then
            echo "State file unchanged or does not exist."
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "State file changed."
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Commit and push state file if changed
        # 仅当 git_status 步骤检测到更改时运行
        if: steps.git_status.outputs.changed == 'true' 
        run: |
          echo "Attempting to commit and push updated state file..."
          git commit -m "${{ env.COMMIT_MESSAGE }}"
          # 尝试推送，如果失败（例如因为远程有更新），尝试拉取并重新推送
          # 注意：如果同时有其他人/流程修改了 main 分支，这里可能需要更复杂的冲突处理
          # 但对于一个主要由此 Action 修改的状态文件，通常是安全的
          git push origin main || (sleep 5 && git pull origin main --rebase && git push origin main)
          echo "State file committed and pushed."
          
      # !!! 移除了 Artifact 上传步骤 !!!