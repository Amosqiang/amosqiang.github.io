# .github/workflows/sync_to_x.yml
name: Sync Blog Posts to X

# 设置权限: actions:read 用于可能的未来 artifact 查找(虽然现在不用了), contents:write 允许提交状态文件回仓库
permissions:
  actions: read    
  contents: write 

on:
  # 允许手动触发
  workflow_dispatch: 
  # 在 Pages 部署成功后触发
  workflow_run:
    workflows: ["pages-build-deployment"] # 确保这是你 Pages 部署工作流的准确名称
    types: [completed]

jobs:
  sync:
    # 仅当触发工作流成功完成时运行
    if: ${{ github.event.workflow_run.conclusion == 'success' }} 
    runs-on: ubuntu-latest
    env:
      # --- 配置区 ---
      PYTHON_VERSION: '3.9'
      STATE_FILE_PATH: './last_post_guid.txt' # 状态文件路径 (相对于仓库根目录)
      RSS_FEED_URL: 'https://amosqiang.github.io/feed.xml' # 你的 RSS Feed 地址
      COMMIT_USER_NAME: 'github-actions[bot]' # Git 提交者名称
      COMMIT_USER_EMAIL: 'github-actions[bot]@users.noreply.github.com' # Git 提交者邮箱
      COMMIT_MESSAGE: 'chore: Update last tweeted post GUID' # 自动提交的消息
      # 在这里设置需要筛选的标签 (大小写不敏感)
      REQUIRED_TAG: "X" 
      # 在这里设置推文的格式模板, 可用占位符: {title}, {link}
      TWEET_FORMAT: "{title} {link}" 
      # --- 配置区结束 ---

    steps:
      # 步骤 1: 签出代码库 (包含状态文件)
      - name: Checkout repository
        uses: actions/checkout@v4

      # 步骤 2: 设置 Python 环境
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip' # 缓存 pip 依赖

      # 步骤 3: 安装 Python 依赖库
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      # 步骤 4: (可选) 等待 Feed 更新 (根据需要调整时间)
      - name: Wait for feed propagation (optional)
        run: sleep 60s # 等待 60 秒

      # 步骤 5: 运行 Python 同步脚本
      - name: Run sync script
        id: sync_script 
        env:
          # 将 secrets 和上面定义的 env 变量传递给脚本
          X_API_KEY: ${{ secrets.X_API_KEY }}
          X_API_SECRET: ${{ secrets.X_API_SECRET }}
          X_ACCESS_TOKEN: ${{ secrets.X_ACCESS_TOKEN }}
          X_ACCESS_TOKEN_SECRET: ${{ secrets.X_ACCESS_TOKEN_SECRET }}
          RSS_FEED_URL: ${{ env.RSS_FEED_URL }}
          STATE_FILE_PATH: ${{ env.STATE_FILE_PATH }}
          REQUIRED_TAG: ${{ env.REQUIRED_TAG }} 
          TWEET_FORMAT: ${{ env.TWEET_FORMAT }}
        run: python sync_to_x.py 

      # ---- 步骤 6: 提交并推送状态文件 (如果被脚本修改了) ----
      - name: Configure Git User
        # 配置 Git 提交者信息
        run: |
          git config user.name "${{ env.COMMIT_USER_NAME }}"
          git config user.email "${{ env.COMMIT_USER_EMAIL }}"
          
      - name: Add state file to staging
        # 总是尝试将状态文件加入暂存区
        run: git add ${{ env.STATE_FILE_PATH }} || echo "State file not found or could not be added."

      - name: Commit and push state file (if changed)
        # 检查暂存区是否有任何更改，如果有则提交并推送
        run: |
          if git diff --staged --quiet; then
            echo "No changes detected in state file to commit."
          else
            echo "State file changed. Attempting to commit and push..."
            git commit -m "${{ env.COMMIT_MESSAGE }}"
            # 推送并包含简单的重试/拉取逻辑
            git push origin main || (sleep 5 && git pull origin main --rebase && git push origin main) || (sleep 10 && git pull origin main --rebase && git push origin main)
            echo "State file changes committed and pushed."
          fi